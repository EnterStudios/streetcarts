swagger: '2.0'
info:
  version: '1.0'
  title: StreetCarts API
  description: StreetCarts API.
basePath: /v1/streetcarts
host: org_name-env.apigee.net
schemes:
  - http
  - https
consumes:
  - application/json
produces:
  - application/json
paths:
  '/foodcarts':
    get:
      description: View all food carts.
      operationId: View food carts
      produces:
        - application/json
      tags:
        - Food Carts
      parameters: 
        - name: x-api-key
          in: header
          description: 'Consumer key for the registered developer application.'
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/foodcarts'
    post:
      description: Create a food cart.
      operationId: Create food cart
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - Food Carts
      parameters:
        - name: Authorization
          in: header
          description: 'Pass the access token returned when the user was authenticated as <code>Bearer <i>access-token</i></code>.'
          required: true
          type: string
        - name: body
          in: body
          required: true
          description: Details for the food cart.
          schema:
            $ref: '#/definitions/foodcartDetails'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/foodcart'
  '/foodcarts/{cart_id}':
    get:
      description: View food cart details.
      operationId: View food cart details
      produces:
        - application/json
      tags:
        - Food Carts
      parameters:
        - name: cart_id
          in: path
          description: ID of the food cart.
          required: true
          type: string
        - name: x-api-key
          in: header
          description: 'Consumer key for the registered developer application.'
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/foodcart'
    put:
      description: Update food cart details.
      operationId: Update food cart
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - Food Carts
      parameters:
        - name: cart_id
          in: path
          required: true
          description: ID of the food cart.
          type: string
        - name: Authorization
          in: header
          description: 'Pass the access token returned when the user was authenticated as <code>Bearer <i>access-token</i></code>.'
          required: true
          type: string
        - name: body
          in: body
          required: true
          description: Details to update for the food cart.
          schema:
            $ref: '#/definitions/foodcartDetails'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/foodcart'
    delete:
      description: Delete a food cart.
      operationId: Delete food cart
      produces:
        - application/json
      tags:
        - Food Carts
      parameters:
        - name: Authorization
          in: header
          description: 'Pass the access token returned when the user was authenticated as <code>Bearer <i>access-token</i></code>.'
          required: true
          type: string
        - name: cart_id
          in: path
          description: ID of the food cart.
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/foodcart'
  '/foodcarts/{cart_id}/menus':
    get:
      description: View the menus associated with a food cart.
      operationId: View food cart menus
      produces:
        - application/json
      tags:
        - Food Carts
      parameters:
        - name: cart_id
          in: path
          description: ID of the food cart.
          required: true
          type: string
        - name: x-api-key
          in: header
          description: 'Consumer key for the registered developer application.'
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/menus'
    post:
      description: Add a menu to a food cart.
      operationId: Create food cart menu
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - Food Carts
      parameters:
        - name: cart_id
          in: path
          description: ID of the food cart.
          required: true
          type: string
        - name: Authorization
          in: header
          description: 'Pass the access token returned when the user was authenticated as <code>Bearer <i>access-token</i></code>.'
          required: true
          type: string
        - name: body
          in: body
          required: true
          description: Name of the menu.
          schema:
            $ref: '#/definitions/menuName'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/menu'
  '/foodcarts/{cart_id}/items':
    get:
      description: View menu items associated with a food cart.
      operationId: View food cart items
      produces:
        - application/json
      tags:
        - Food Carts
      parameters:
        - name: cart_id
          in: path
          description: ID of the food cart.
          required: true
          type: string
        - name: x-api-key
          in: header
          description: 'Consumer key for the registered developer application.'
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/items'
    post:
      description: Create a menu item to a food cart.
      operationId: Create food cart menu item
      tags:
        - Food Carts
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: cart_id
          in: path
          description: ID of the food cart.
          required: true
          type: string
        - name: Authorization
          in: header
          description: 'Pass the access token returned when the user was authenticated as <code>Bearer <i>access-token</i></code>.'
          required: true
          type: string
        - name: body
          in: body
          required: true
          description: Details for the menu item.
          schema:
            $ref: '#/definitions/itemDetails'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/item'
  '/menus/{menu_id}':
    get:
      description: View details for a menu.
      operationId: View menu details
      tags:
        - Menus
      parameters:
        - name: menu_id
          in: path
          description: ID of the menu.
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/menuDetails'
    delete:
      description: Delete a menu.
      operationId: Delete menu
      tags:
        - Menus
      parameters:
        - name: menu_id
          in: path
          description: ID of the menu.
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/menu'
  '/menus/{menu_id}/items':
    get:
      description: View all items on a menu.
      operationId: View items on Menu
      tags:
        - Menus
      parameters:
        - name: menu_id
          in: path
          description: ID of the menu.
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/items'
  '/menus/{menu_id}/items/{item_id}':
    put:
      description: Add an item to a menu.
      operationId: Add item to menu
      tags:
        - Menus
      parameters:
        - name: menu_id
          in: path
          description: ID of the menu.
          required: true
          type: string
        - name: item_id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/item'
    delete:
      description: Remove an item from a menu.
      operationId: Remove item from menu
      tags:
        - Menus
      parameters:
        - name: menu_id
          in: path
          description: ID of the menu.
          required: true
          type: string
        - name: item_id
          in: path
          description: ID of the menu item.
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/item'
  '/items/{item_id}':
    get:
      description: View details for a menu item.
      operationId: View menu item details
      produces:
        - application/json
      tags:
        - Menu Items
      parameters:
        - name: item_id
          in: path
          description: ID of the menu item.
          required: true
          type: string
        - name: x-api-key
          in: header
          description: 'Consumer key for the registered developer application.'
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/item'
    put:
      description: Update a menu item.
      operationId: Update menu item
      tags:
        - Menu Items
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: item_id
          in: path
          description: ID of the menu item.
          required: true
          type: string
        - name: Authorization
          in: header
          description: 'Pass the access token returned when the user was authenticated as <code>Bearer <i>access-token</i></code>.'
          required: true
          type: string
        - name: body
          in: body
          required: true
          description: Updates for the menu item.
          schema:
            $ref: '#/definitions/itemDetails'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/item'
    delete:
      description: Delete a menu item.
      operationId: Delete menu item
      tags:
        - Menu Items
      produces:
        - application/json
      parameters:
        - name: item_id
          in: path
          description: ID of the menu item.
          required: true
          type: string
        - name: Authorization
          in: header
          description: 'Pass the access token returned when the user was authenticated as <code>Bearer <i>access-token</i></code>.'
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/delete-item'
  '/users':
    get:
      description: 'View all users. <b>Note</b>: This method is not yet supported; the required permissions are not configured.'
      operationId: View users
      tags:
        - Users
      produces:
        - application/json
      parameters:
        - name: Authorization
          in: header
          description: 'Pass the access token returned when the user was authenticated as <code>Bearer <i>access-token</i></code>.'
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/users'
    post:
      description: Create a user.
      operationId: Create user
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - Users
      parameters:
        - name: body
          in: body
          required: true
          description: Updates for the menu item.
          schema:
            $ref: '#/definitions/userDetails'
        - name: x-api-key
          in: header
          description: 'Consumer key for the registered developer application.'
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/user'
  '/users/{user_id}':
    get:
      description: 'View details for a user. <b>Note</b>: This method is not yet supported.'
      operationId: View user details
      produces:
        - application/json
      tags:
        - Users
      parameters:
        - name: user_id
          in: path
          description: ID of the user.
          required: true
          type: string
        - name: Authorization
          in: header
          description: 'Pass the access token returned when the user was authenticated as <code>Bearer <i>access-token</i></code>.'
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/user'
  '/accesstoken':
    post:
      description: 'Authenticate user and get an access token.'
      operationId: Authenticate user
      tags:
        - Users
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
        - name: username
          in: formData
          description: 'Username.'
          required: true
          type: string
        - name: password
          in: formData
          description: 'Password.'
          required: true
          type: string
        - name: grant_type
          in: formData
          description: 'Grant type. Must be set to <code>password</code>.'
          required: true
          type: string
          default: password
        - name: Authorization
          in: header
          description: 'Base64 encode the consumer key and consumer secret (separated by a colon) for the registered developer application and pass as <code>Basic <i>encoded-value</i></code>.'
          required: true
          type: string
        - name: x-api-key
          in: header
          description: 'Consumer key for the registered developer application.'
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/access-token'
definitions:
  foodcarts:
    type: array
    description: List of food carts.
    items:
      properties:
        cartname:
          type: string
        uuid:
          type: string
          description: ID of the food cart.
          description: Name of the food cart.
  foodcart:
    description: Food cart details.
    properties:
      cartName:
        type: string
        description: Name of the food cart.
      description:
        type: string
        description: Description of the food cart.
      hours:
        type: string
        description: Hours of operation.
      location:
        properties:
          latitude:
            type: string
            description: Latitude of the food cart. Required for locating the cart in mapping apps.
          longitude:
            type: string
            description: Longitude of the food cart. Required for locating the cart in mapping apps.
      ownerID:
        type: string
        description: ID of the owner of the food cart.
      phone:
        type: string
        description: Phone number for the food cart.
      url:
        type: string
        description: URL of the food cart.
      uuid:
        type: string
        description: ID of the food cart.
  foodcartDetails:
    type: object
    properties:
      cartName:
        type: string
        description: Name of the food cart.
      description:
        type: string
        description: Description of the food cart.
      hours:
        type: string
        description: 'Hours of operation. For example: Monday through Saturday: 9-6, Closed Sunday.'
      location:
        properties:
          address:
            type: string
            description: Mailing address for the food cart.
          city:
            type: string
            description: City where the food cart is located.
          region:
            type: string
            description: State or region where the food cart is located.
          country:
            type: string
            description: Country where the food cart is located.
          postalCode:
            type: string
            description: Postal code for the food cart.
          latitude:
            type: string
            description: Latitude of the food cart. Required for locating the cart in mapping apps.
          longitude:
            type: string
            description: Longitude of the food cart. Required for locating the cart in mapping apps.
          shortAddress:
            type: string
            description: 'Short description of the food cart location, including landmarks.'
      phone:
        type: string
        description: Phone number for the food cart.
      url:
        type: string
        description: URL of the food cart.
  menuDetails:
    description: Menu details.
    properties:
      cartID:
        description: ID of the food cart.
        type: string
      menuName:
        type: string
        description: Name of the menu.
      items:
        type: array
        description: List of menu items.
        items:
          $ref: '#/definitions/item'
      uuid:
        description: ID of the menu.
        type: string
  menu:
    properties:
      cartID:
        description: ID of the food cart.
        type: string
      menuName:
        type: string
        description: Name of the menu.
      uuid:
        description: ID of the menu.
        type: string
  items:
    type: array
    description: List of menu items.
    items:
      $ref: '#/definitions/item'
  item:
    description: Menu item details.
    properties:
      cartID:
        type: string
        description: ID of the food cart.
      description:
        type: string
        description: Description of the menu item.
      itemName:
        type: string
        description: Name of the menu item.
      price:
        type: number
        description: Price of the menu item.
      uuid:
        type: string
        description: ID of the menu item.
  itemDetails:
    properties:
      description:
        type: string
        description: Description of the menu item.
      itemName:
        type: string
        description: Name of the menu item.
      price:
        type: string
        description: Price of the menu item.
  delete-item:
    description: Deleted menu item.
    properties:
      action:
        type: string
        description: Action (delete).
      application:
        type: string
        description: Application ID.
      applicationName:
        type: string
        description: Application name.
      duration:
        type: integer
        description: Duration of the operation.
      entities:
        description: Entity that was deleted.
        properties:
          cartID:
            type: string
            description: ID of the food cart.
          created:
            type: integer
            description: Time the entity was created in epoch format.
          description:
            type: string
            description: Description of the menu item.
          itemName:
            type: string
            description: Name of the menu item.
          metadata: 
            type: object
            description: Metadata.
          modified:
            type: integer
            description: Time the entity was deleted in epoch format.
          price:
            type: number
            description: Price of the menu item.
          type:
            type: string
            description: Type of entity.
          uuid:
            type: string
            description: ID of the menu item.
      organization:
        type: string
        description: Organization name.
      params:
        type: object
        description: List of parameters.
      path:
        type: string
        description: Resource path.
      timestamp:
        type: integer
        descrpition: Timestamp in epoch format.
      uri:
        type: string
        description: Resource URI.
  access-token:
    properties:
      access_token:
        type: string
        description: Access token that can be used to issue other API calls.
      api_product_list: 
        type: string
        description: Aray of API product names for which this token is valid.
      application_name:
        type: string
        description: Internal unique identifier for the developer application under which this token was generated.
      client_id:
        type: string
        description: Consumer key for the registered developer application.
      developer.email:
        type: string
        description: Email of the developer.
      expires_in:
        type: string
        description: "Time that the access token expires. If set to 0, there is no expiration date."
      issued-at:
        type: string
        description: Time the access token was issues in epoch format.
      organization_name:
        type: string
        description: Organization name.
      refresh_count:
        type: string
        description: Number of times the access token has been refreshed.
      refresh_token:
        type: string
        description: Refresh token.
      refresh_token_expires_in:
        type: string
        description: "Time that the access token expires. If set to 0, there is no expiration date."
      refresh_token_issued_at:
        type: string
        description: Time the access token was issues in epoch format.
      refresh_token_status: 
        type: string
        description: Status of the refresh token.
      scope:
        type: string
        description: OAuth scopes granted for the user this token represents.
      status: 
        type: string
        description: Status of the request.
      token_type:
        type: string
        description: Token type (BearerToken).
      USER_BAAS_TOKEN: 
        type: string
        description: Authorization token received from the backend data store. For internal use by StreetCarts.
      USER_UUID: 
        type: string
        description: Unique ID in the data store for the user this token represents. For internal use by StreetCarts.
  delete-menu:
    description: Deleted menu item.
    properties:
      action:
        type: string
        description: Action (delete).
      application:
        type: string
        description: Application ID.
      applicationName:
        type: string
        description: Application name.
      duration:
        type: integer
        description: Duration of the operation.
      entities:
        description: Entity that was deleted.
        properties:
          cartID:
            type: string
            description: ID of the food cart.
          created:
            type: integer
            description: Time the entity was created in epoch format.
          description:
            type: string
            description: Description of the menu item.
          menuName:
            type: string
            description: Name of the menu.
          metadata: 
            type: object
            description: Metadata.
          modified:
            type: integer
            description: Time the entity was deleted in epoch format.
          price:
            type: number
            description: Price of the menu item.
          type:
            type: string
            description: Type of entity.
          uuid:
            type: string
            description: ID of the menu item.
      organization:
        type: string
        description: Organization name.
      params:
        type: object
        description: List of parameters.
      path:
        type: string
        description: Resource path.
      timestamp:
        type: integer
        descrpition: Timestamp in epoch format.
      uri:
        type: string
        description: Resource URI.
  userDetails:
    required:
      - username
      - password
    properties:
      address:
        type: string
        description: Street address of user.
      city:
        type: string
        description: City where user resides.
      email:
        type: string
        description: User email.
      firstName:
        type: string
        description: First name of user.
      lastName:
        type: string
        description: Last name of user.
      password:
        type: string
        description: Password.
      postalCode:
        type: string
        description: Postal code where user resides.
      region:
        type: string
        description: Region or state where user resides.
      username:
        type: string
        description: User name.
  users:
    type: array
    description: List of users.
    items:
      properties:
        email:
          type: string
          description: User email.
        username:
          type: string
          description: Username.
        uuid:
          type: string
          description: ID of the user.
  user:
    description: User details.
    properties:
      activated:
        type: boolean
        description: Flag that specifies whether the user is activated.
      address:
        type: string
        description: Street address of user.
      city:
        type: string
        description: City where user resides.
      email:
        type: string
        description: User email.
      firstName:
        type: string
        description: First name of user.
      lastName:
        type: string
        description: Last name of user.
      picture:
        type: string
        description: URL to user picture.
      postalCode:
        type: string
        description: Postal code where user resides.
      region:
        type: string
        description: Region or state where user resides.
      username:
        type: string
        description: Username.
      uuid:
        type: string
        description: ID of the user.
